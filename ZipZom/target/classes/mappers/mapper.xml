<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.ZipZom.TestMapper">
	<!-- 로그인 확인 sql문 -->
	<select id="loginSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select id,seq_u seqU from user where id=#{id} and password=#{password}
	</select>
	<!-- 회원가입 시 회원 정보 입력 sql문 -->
	<insert id="signUpInsert" parameterType="modelTO.userTO">
		insert into user (
		name, 
		id, 
		password, 
		email, 
		address, 
		tel1, 
		tel2
		) 
		values (
		#{name}, 
		#{id}, 
		#{password}, 
		#{email}, 
		#{address}, 
		#{tel1}, 
		#{tel2}
		)
	</insert>
	<!-- 아이디 중복 검사 sql문 -->
	<select id="duIdSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select id from user where id=#{id}
	</select>
	<!-- 이메일 중복 검사 sql문 -->
	<select id="duEmailSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select email from user where email=#{email}
	</select>
	<!-- 아이디 찾기 sql문 -->
	<select id="findIdSelect" parameterType="modelTO.userTO" resultType="String">
		select id from user where email=#{email} and name=#{name}
	</select>
	<!-- 비밀번호 찾기 sql문 -->
	<select id="sendNumberSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select email from user where email=#{email} and ID=#{id}
	</select>
	<!-- 비밀번호 찾기 sql문에 의해 회원이 인증 된 후 인증번호 저장 sql문 -->
	<insert id="auth_KeyInsert" parameterType="modelTO.auth_passwordTO">
		insert into auth_password (
		email,
		auth_Key, 
		generate_Date
		) 
		values (
		#{email}, 
		#{authKey}, 
		#{generateDate}
		)
	</insert>
	<!-- 이메일로 발송하는 인증번호의 중복검사 sql문 -->
	<select id="duplicateAuth_KeySelect" parameterType="modelTO.auth_passwordTO" resultType="String">
		select AUTH_KEY from auth_password where AUTH_KEY=#{authKey}
	</select>
	<!-- 인증번호 테이블의 이메일 중복검사 sql문 -->
	<select id="duplicateEmailSelect" parameterType="modelTO.auth_passwordTO" resultType="String">
		select email from auth_password where EMAIL=#{email}
	</select>
	<!-- 인증번호 테이블의 이메일이 중복되었을 경우 삭제하는 sql문 -->
	<delete id="duplicateEmailDelete" parameterType="modelTO.auth_passwordTO">
		delete from auth_password where EMAIL=#{email}
	</delete>
	<!-- 생성된지 1시간이 지난 인증번호 삭제 sql문 -->
	<delete id="auth_KeyDelete" parameterType="modelTO.auth_passwordTO">
		delete from auth_password where generate_date &lt; date_add(now(), interval -1 hour)
	</delete>
	<!-- 인증번호 검사 sql문 -->
	<select id="authKeySelect" parameterType="modelTO.auth_passwordTO" resultType="String">
		select email from auth_password where AUTH_KEY=#{authKey}
	</select>
	<!--비밀번호 변경 sql문 -->
	<update id="userPasswordUpdate" parameterType="modelTO.auth_passwordTO">
		UPDATE user SET password = #{password} WHERE email = #{email};
	</update>
	
	<!-- 회원탈퇴 sql문 -->
	<delete id="userDelete" parameterType="modelTO.userTO">
		delete from user where where SEQ_U=${seqU}, password=#{password}
	</delete>
	<!-- 관리자 회원탈퇴 sql문 -->
	<delete id="userAdminDelete" parameterType="modelTO.userTO">
		delete from user where where SEQ_U=${seqU}
	</delete>
	<!-- 관리자 유저관리 view sql문 -->
	<select id="userAdminSelect" resultType="modelTO.userTO">
		select SEQ_U as seqU,
		NAME as name,
		ID as id,
		EMAIL as email,
		ADDRESS as address,
		TEL1 as tel1, 
		TEL2 as tel2
		from user
	</select>
	
	<select id="customerInfo" parameterType="modelTO.customerTO" resultType="modelTO.customerTO">
	select name,tel
 	from customer where seq_C=#{seqC}
	</select>
	
	<!-- 고객 상세보기,수정창 -->
	<select id="customerView" parameterType="modelTO.customerTO" resultType="modelTO.CustomerAllTO">
		select seq_c seqC,name,tel,b_type bType,type,progress,contract_type contractType,date_format(b_year,'%Y') bYear,budget_t1 budgetT1,budget_t2 budgetT2,budget_t3 budgetT3,budget_l budgetL,
		area2,move_schedule moveSchedule,room,direction,option,floor,elevator,context,security,
		bed,washing_machine washingMachine,desk,drying_machine dryingMachine,induction,electric_range electricRange,gas_range gasRange,wordrobe,sink,shoe_rack shoeRack,refrigerator,bath_tube bathTube,
		security_guard securityGuard,videophone,interphone,card_key cardKey,cctv,door_security doorSecurity,window_guard windowGuard,
		(select visit_date from customer_visit_date where pseq_cvd = c.seq_c order by seq_cvd desc limit 0,1) visitDate
		from customer c left outer join option_customer oc
		on c.seq_c = oc.pseq_oc
		left outer join security_customer sc
		on sc.pseq_sc = c.seq_c
		where c.seq_c = #{seqC}
	</select>
	<!-- 고객관리 창 -->
	<select id="customerList" parameterType="modelTO.customerTO" resultType="modelTO.customerTO">
		select seq_c seqC,name,tel,type,b_type bType,progress,contract_type contractType, (select visit_date from customer_visit_date where pseq_cvd = seq_c limit 1) visitDate
		 from customer where pseq_c = #{pseqC} order by seqC desc
	</select>
	<!-- 고객 등록 -->
	<insert id="customerWrite" parameterType="modelTO.customerTO" useGeneratedKeys="true" keyProperty="seqC">
	insert into customer values(0,#{pseqC},#{name},#{tel},#{type},#{progress},#{contractType},#{budgetT1},
	#{budgetT2},#{budgetT3},#{budgetL},#{area2},#{moveSchedule},
	#{room},#{direction},#{option},#{floor},#{elevator},#{bYear},#{context},#{security},#{bType})
	<selectKey keyProperty="seqC" resultType="int">
	select last_insert_id()
	</selectKey>
	</insert>
	<!-- 고객 등록 시 옵션 등록 -->
	<insert id="optionCustomerWrite" parameterType="modelTO.option_customerTO">
	insert into option_customer values(0,#{pseqOc},#{bed},#{washingMachine},#{desk},#{dryingMachine},#{induction},#{electricRange},#{gasRange},#{wordrobe},#{sink},#{shoeRack},#{refrigerator},#{bathTube})
	</insert>
	<!-- 고객 등록 시 방문 날짜 -->
	<insert id="customerVisitDate" parameterType="modelTO.customer_visit_dateTO">
	insert into customer_visit_date values(0,#{pseqCvd},#{visitDate})
	</insert>
	<!-- 고객 등록 시 보안 옵션 -->
	<insert id="securityCustomer" parameterType="modelTO.security_customerTO">
	insert into security_customer values(0,#{pseqSc},#{securityGuard},#{videophone},#{interphone},#{cardKey},#{cctv},#{doorSecurity},#{windowGuard});
	</insert>
	<!-- 고객 삭제 -->
	<delete id="customerDelete" parameterType="modelTO.customerTO">
	delete from customer where seq_c = #{seqC}
	</delete>
	<!-- 고객 삭제 시 방문날짜 제거 -->
	<delete id="cvdDelete" parameterType="modelTO.customer_visit_dateTO">
	delete from customer_visit_date where pseq_cvd = #{pseqCvd}
	</delete>
	<!-- 고객 삭제 시 옵션 제거 -->
	<delete id="ocDelete" parameterType="modelTO.option_customerTO">
	delete from option_customer where pseq_oc = #{pseqOc}
	</delete>
	<!-- 고객 삭제 시 보안 옵션 제거 -->
	<delete id="scDelete" parameterType="modelTO.security_customerTO">
	delete from security_customer where pseq_sc = #{pseqSc}
	</delete>
	<!-- 고객 수정 -->
	<update id="customerUpdate" parameterType="modelTO.customerTO">
		update customer set tel = #{tel},type = #{type},progress = #{progress},contract_type = #{contractType},
		budget_t1 = #{budgetT1},budget_t2 = #{budgetT2},budget_t3=#{budgetT3},budget_l=#{budgetL},area2=#{area2},
		move_schedule=#{moveSchedule},room=#{room},direction=#{direction},option=#{option},floor=#{floor},elevator=#{elevator},b_year=#{bYear},context=#{context},security=#{security},b_type=#{bType}
		where seq_c = #{seqC}
	</update>
	<!-- 고객 옵션 수정 -->
	<update id="ocUpdate" parameterType="modelTO.option_customerTO">
		update option_customer set bed=#{bed},washing_machine=#{washingMachine},desk=#{desk},drying_machine=#{dryingMachine},
		induction=#{induction},electric_range=#{electricRange},gas_range=#{gasRange},wordrobe=#{wordrobe},sink=#{sink},
		shoe_rack=#{shoeRack},refrigerator=#{refrigerator},bath_tube=#{bathTube}
		where pseq_oc = #{pseqOc}
	</update>
	<!-- 고객 보안 수정 -->
	<update id="scUpdate" parameterType="modelTO.security_customerTO">
		update security_customer set security_guard=#{securityGuard},videophone=#{videophone},interphone=#{interphone},
		card_key=#{cardKey},cctv=#{cctv},door_security=#{doorSecurity},window_guard=#{windowGuard}
		where pseq_sc = #{pseqSc}
	</update>
	<insert id="cvdUpdate" parameterType="modelTO.customer_visit_dateTO">
	insert into customer_visit_date values(0,#{pseqCvd},#{visitDate})
	</insert>
	<!-- 매물 상세보기,수정창 -->
	<select id="pfsView" parameterType="modelTO.pfsAllTO" resultType="modelTO.pfsAllTO">
		select SEQ_PFS seqPfs,B_TYPE bType,concat(si,' ',gu,' ',dong,' ',bunji,' ') address,h_number hNumber,dong,CONTRACT_TYPE contractType,
		BUDGET1,BUDGET2,BUDGET3,LOAN,AREA1,AREA2,AREA3,MOVE_SCHEDULE moveSchedule,
		END_OF_LEASE endOfLease,ROOM,BATHROOM,DIRECTION,HEATING_SYSTEM heatingSystem,NUMBER_OF_HOUSEHOLD numberOfHousehold,elevator,
		parking,FLOOR,FLOOR_TOTAL floorTotal,date_format(b_year,'%Y') bYear,CONTEXT,aircondition,
		security_guard securityGuard,videophone,interphone,card_key cardKey,cctv,door_security doorSecurity,window_guard windowGuard,
		lessor_name lessorName,lessor_tel lessorTel,lessee_name lesseeName,lessee_tel lesseeTel
		from property_for_sale pfs left outer join security_pfs sp
		on sp.pseq_sp = pfs.seq_pfs
		where seq_pfs = #{seqPfs}
	</select>
	<!-- 매물 쓰기 -->
	<insert id="pfsWrite" parameterType="modelTO.pfsTO" useGeneratedKeys="true" keyProperty="seqPfs">
		insert into property_for_sale values(0,#{pseqPfs},#{bType},#{si},#{gu},#{dong},#{bunji},#{hNumber},#{contractType},#{budget1},#{budget2},#{budget3},
		#{mCost},#{loan},#{area1},#{area2},#{area3},#{moveSchedule},
		#{endOfLease},#{room},#{bathroom},#{direction},#{heatingSystem},#{aircondition},#{option},#{numberOfHousehold},
		#{parking},#{floor},#{floorTotal},#{elevator},#{bYear},#{context},#{security},#{lessorName},#{lessorTel},#{lesseeName},#{lesseeTel},now())
		
	<selectKey keyProperty="seqPfs" resultType="int">
	select last_insert_id()
	</selectKey>
	</insert>
	<!-- 매물 옵션 쓰기 -->
	<insert id="pfsOption" parameterType="modelTO.option_customerTO">
		insert into option_pfs values(0,#{pseqOp},#{bed},#{washingMachine},#{desk},#{dryingMachine},#{induction},#{electricRange},
		#{gasRange},#{wordrobe},#{sink},#{shoeRack},#{refrigerator},#{bathTube})
	</insert>
	<!-- 매물 보안 쓰기 -->
	<insert id="pfsSecurity" parameterType="modelTO.security_pfsTO">
		insert into security_pfs values(0,#{pseqSp},#{securityGuard},#{videophone},#{interphone},#{cardKey},#{cctv},#{doorSecurity},#{windowGuard})
	</insert>
	<!-- 매물 리스트 -->
	<select id="pfsList" parameterType="modelTO.pfsTO" resultType="modelTO.pfsTO">
	select seq_pfs seqPfs,b_type bType,contract_type contractType,si,gu,dong,bunji,h_number hNumber,budget1,budget2,budget3,loan,wdate
	 from property_for_sale
	 where pseq_pfs = #{pseqPfs} order by seq_pfs desc
	</select>
	<!-- 매물 수정 -->
	<update id="pfsUpdate" parameterType="modelTO.pfsTO">
	update property_for_sale set si=#{si},b_type=#{bType},gu=#{gu},dong=#{dong},bunji=#{bunji},h_number=#{hNumber},contract_type=#{contractType},budget1=#{budget1},
		budget2=#{budget2},budget3=#{budget3},
		loan=#{loan},area1=#{area1},area2=#{area2},area3=#{area3},move_schedule=#{moveSchedule},
		end_of_lease=#{endOfLease},room=#{room},bathroom=#{bathroom},direction=#{direction},heating_system=#{heatingSystem},
		aircondition=#{aircondition},number_of_household=#{numberOfHousehold},
		parking=#{parking},floor=#{floor},floor_total=#{floorTotal},elevator=#{elevator},b_year=#{bYear},
		context=#{context},lessor_name=#{lessorName},lessor_tel=#{lessorTel},lessee_name=#{lesseeName},lessee_tel=#{lesseeTel}
		where seq_pfs = #{seqPfs}
	</update>
	<!-- 매물 보안 수정 -->
	<update id="spUpdate" parameterType="modelTO.security_pfsTO">
	update security_pfs set security_guard=#{securityGuard},videophone=#{videophone},interphone=#{interphone},
	card_key=#{cardKey},cctv=#{cctv},door_security=#{doorSecurity},window_guard=#{windowGuard}
		where pseq_sp = #{pseqSp}
	</update>
	
	<!-- 매물 삭제 -->
	<delete id="pfsDelete" parameterType="modelTO.pfsTO">
	delete from property_for_sale where seq_pfs = #{seqPfs}
	</delete>
	
	<delete id="spDelete" parameterType="modelTO.security_pfsTO">
	delete from security_pfs where pseq_sp = #{pseqSp}
	</delete>
	
	<delete id="opDelete" parameterType="modelTO.option_pfsTO">
	delete from option_pfs where pseq_op = #{pseqOp}
	</delete>
	
	<!-- 매물비교창 -->
	<select id="pfsCompare" parameterType="modelTO.pfsTO" resultType="modelTO.pfsTO">
	select seq_pfs seqPfs, si,gu,dong,bunji,h_number hNumber,b_type bType,contract_type contractType,budget1,budget2,budget3,area1,area2,area3,room,bathroom,
	direction,heating_system heatingSystem,parking,date_format(b_year,'%Y') bYear,elevator,context,number_of_household numberOfHousehold
	from property_for_sale
	where seq_pfs = #{seqPfs}
	</select>
	
	<!-- 맞춤매물 고객정보 -->
	<select id="customerFind" parameterType="modelTO.customerTO" resultType="modelTO.customerTO">
	select seq_c seqC,name,tel,b_type bType,type,progress,contract_type contractType,date_format(b_year,'%Y') bYear,
	budget_t1 budgetT1,budget_t2 budgetT2,budget_t3 budgetT3,
	area2,room,floor,elevator from customer where name=#{name} and tel=#{tel} limit 0,1
	</select>
	
	<!-- 맞춤매물 리스트 -->
	<select id="pfsFind" parameterType="modelTO.pfsTO" resultType="modelTO.pfsTO">
	<![CDATA[
	select seq_pfs seqPfs,b_type bType,contract_type contractType,si,gu,dong,bunji,h_number hNumber,budget1,budget2,budget3,loan,wdate
	 from property_for_sale
	 where pseq_pfs = #{pseqC} and b_type=#{bType} and budget1 <= #{budgetT1} and budget2 <= #{budgetT2}
	 and budget3 <= #{budgetT3} and contract_type = #{contractType} and area2 >= #{area2} and b_year >= #{bYear} and room >= #{room}
	 and floor <= #{floor} and elevator <= ${elevator}
	 order by seq_pfs desc
	 ]]>
	</select>
	
	<!-- 일정관리 view 페이지 select sql문 -->
	<select id="scheduleSelect" parameterType="modelTO.scheduleTO" resultType="modelTO.scheduleTO">
		select SEQ_S as seqS,
		PSEQ_S as pseqS,
		CUSTOMER_NAME as customerName,
		CUSTOMER_TEL as customerTel,
		CUSTOMER_STATE as customerState,
		start, 
		end, 
		CONTEXT, 
		SCHEDULE_TYPE as scheduleType, 
		PROGRESS, 
		B_TYPE as bType, 
		CONTRACT_TYPE as contractType,
		backgroundColor, 
		textColor, 
		allday
		from schedule
		where PSEQ_S = ${pseqS}
	</select>
	<!-- 일정 추가 sql문 -->
	<insert id="scheduleInsert" parameterType="modelTO.scheduleTO">
		insert into schedule (
		PSEQ_S,
		CUSTOMER_NAME,
		CUSTOMER_TEL,
		CUSTOMER_STATE,
		start, 
		end, 
		CONTEXT, 
		SCHEDULE_TYPE,
		PROGRESS, 
		B_TYPE,
		CONTRACT_TYPE,
		backgroundColor, 
		textColor, 
		allDay
		) 
		values (
		${pseqS}, 
		#{customerName}, 
		#{customerTel}, 
		#{customerState}, 
		#{start},
		#{end},
		#{context}, 
		#{scheduleType}, 
		#{progress},
		#{bType}, 
		#{contractType},
		#{backgroundColor}, 
		#{textColor}, 
		#{allDay}
		)
	</insert>
	<!--일정 변경 sql문 -->
	<update id="scheduleUpdate" parameterType="modelTO.scheduleTO">
		UPDATE schedule SET
		CUSTOMER_TEL = #{customerTel},
		CUSTOMER_STATE = #{customerState},
		start = #{start},
		end = #{end},
		CONTEXT = #{context},
		SCHEDULE_TYPE = #{scheduleType},
		PROGRESS = #{progress},
		B_TYPE = #{bType},
		backgroundColor = #{backgroundColor},
		textColor = #{textColor},
		allday = ${allDay}
		WHERE SEQ_S = ${seqS}
	</update>
	<!--드래그로 일정 변경 sql문 -->
	<update id="scheduleDateUpdate" parameterType="modelTO.scheduleTO">
		UPDATE schedule SET
		start = #{start},
		end = #{end}
		WHERE SEQ_S = ${seqS}
	</update>
	<!-- 일정 삭제 sql문 -->
	<delete id="scheduleDelete" parameterType="modelTO.scheduleTO">
		delete from schedule where SEQ_S=${seqS}
	</delete>
	
	<!-- 지도비교창 -->
	<select id="pfsMapCompare" parameterType="modelTO.pfsTO" resultType="modelTO.pfsTO">
	select seq_pfs seqPfs, si,gu,dong,bunji,h_number hNumber,b_type bType,contract_type contractType,budget1,budget2,budget3,area1,area2,area3,room,bathroom,floor,AIRCONDITION,
	direction,heating_system heatingSystem,parking,date_format(b_year,'%Y') bYear,elevator,context,number_of_household numberOfHousehold
	from property_for_sale
	where seq_pfs = #{seqPfs}
	</select>
	
	<!-- 유저정보 view sql문 -->
	<select id="userPropertyViewSelect" resultType="modelTO.userTO" parameterType="modelTO.userTO">
		select SEQ_U as seqU,
		NAME as name,
		ID as id,
		EMAIL as email,
		ADDRESS as address,
		TEL1 as tel1, 
		TEL2 as tel2
		from user
		where SEQ_U=${seqU}
	</select>
	
	<!-- 유저정보 update sql문 -->
	<update id="userPropertyUpdate" parameterType="modelTO.userTO">
		update user set
		EMAIL = #{email},
		ADDRESS = #{address},
		TEL1 = #{tel1},
		TEL2 = #{tel2}
		where SEQ_U=${seqU}
	</update>
	
	<!-- 실거래가 매물 리스트 -->
	<select id="rtpFind" parameterType="modelTO.rtpTO" resultType="modelTO.rtpTO">
	<![CDATA[
	select seq_Rtp seqRtp,pseq_Rtp pseqRtp,si,gu,dong,bunji,b_name bName,b_type bType,area2,contract_date1 contractDate1,contract_date2 contractDate2,price,floor,b_year bYear,road_address roadAddress
	 from real_transaction_price
	 where price <= #{budgetT1} and b_type = #{bType} and area2 >= #{area2} and b_year >= #{bYear} 
	 order by dong asc
	 ]]>
	</select>
	
	<!-- 실거래매물 리스트 -->
	<select id="rtpList" parameterType="modelTO.rtpTO" resultType="modelTO.rtpTO">
	select seq_Rtp seqRtp,pseq_Rtp pseqRtp,si,gu,dong,bunji,b_name bName,b_type bType,area2,contract_date1 contractDate1,contract_date2 contractDate2,price,floor,b_year bYear,road_address roadAddress
	 from real_transaction_price order by dong asc
	</select>
</mapper>