<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.ZipZom.TestMapper">
	<!-- 로그인 확인 sql문 -->
	<select id="loginSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select id, seq_u as seqU from user where id=#{id} and password=#{password}
	</select>
	<!-- 회원가입 시 회원 정보 입력 sql문 -->
	<insert id="signUpInsert" parameterType="modelTO.userTO">
		insert into user (
		name, 
		id, 
		password, 
		email, 
		address, 
		tel1, 
		tel2
		) 
		values (
		#{name}, 
		#{id}, 
		#{password}, 
		#{email}, 
		#{address}, 
		#{tel1}, 
		#{tel2}
		)
	</insert>
	<!-- 아이디 중복 검사 sql문 -->
	<select id="duIdSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select id from user where id=#{id}
	</select>
	<!-- 이메일 중복 검사 sql문 -->
	<select id="duEmailSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select email from user where email=#{email}
	</select>
	<!-- 아이디 찾기 sql문 -->
	<select id="findIdSelect" parameterType="modelTO.userTO" resultType="String">
		select id from user where email=#{email} and name=#{name}
	</select>
	<!-- 비밀번호 찾기 sql문 -->
	<select id="sendNumberSelect" parameterType="modelTO.userTO" resultType="modelTO.userTO">
		select email from user where email=#{email} and ID=#{id}
	</select>
	<!-- 비밀번호 찾기 sql문에 의해 회원이 인증 된 후 인증번호 저장 sql문 -->
	<insert id="auth_KeyInsert" parameterType="modelTO.auth_passwordTO">
		insert into auth_password (
		email,
		auth_Key, 
		generate_Date
		) 
		values (
		#{email}, 
		#{authKey}, 
		#{generateDate}
		)
	</insert>
	<!-- 이메일로 발송하는 인증번호의 중복검사 sql문 -->
	<select id="duplicateAuth_KeySelect" parameterType="modelTO.auth_passwordTO" resultType="String">
		select AUTH_KEY as authKey from auth_password where AUTH_KEY=#{authKey}
	</select>
	<!-- 인증번호 테이블의 이메일 중복검사 sql문 -->
	<select id="duplicateEmailSelect" parameterType="modelTO.auth_passwordTO" resultType="String">
		select email from auth_password where EMAIL=#{email}
	</select>
	<!-- 인증번호 테이블의 이메일이 중복되었을 경우 삭제하는 sql문 -->
	<delete id="duplicateEmailDelete" parameterType="modelTO.auth_passwordTO">
		delete from auth_password where EMAIL=#{email}
	</delete>
	<!-- 생성된지 1시간이 지난 인증번호 삭제 sql문 -->
	<delete id="auth_KeyDelete" parameterType="modelTO.auth_passwordTO">
		delete from auth_password where generate_date &lt; date_add(now(), interval -1 hour)
	</delete>
	<!-- 인증번호 검사 sql문 -->
	<select id="authKeySelect" parameterType="modelTO.auth_passwordTO" resultType="String">
		select email from auth_password where AUTH_KEY=#{authKey}
	</select>
	<!--비밀번호 변경 sql문 -->
	<update id="userPasswordUpdate" parameterType="modelTO.auth_passwordTO">
		UPDATE user SET password = #{password} WHERE email = #{email}
	</update>
	<!-- 일정관리 view 페이지 select sql문 -->
	<select id="scheduleSelect" parameterType="modelTO.scheduleTO" resultType="modelTO.scheduleTO">
		select SEQ_S as seqS,
		PSEQ_S as pseqS,
		CUSTOMER_NAME as customerName,
		CUSTOMER_TEL as customerTel,
		CUSTOMER_STATE as customerState,
		DATE, 
		CONTEXT, 
		SCHEDULE_TYPE as scheduleType, 
		PROGRESS, 
		B_TYPE as bType, 
		CONTRACT_TYPE as contractType
		from schedule
		where PSEQ_S = ${pseqS}
	</select>
	<!-- 일정관리 상세정보 view 페이지 select sql문 -->
	<select id="schedulePropertySelect" parameterType="modelTO.scheduleTO" resultType="modelTO.scheduleTO">
		select SEQ_S as seqS,
		PSEQ_S as pseqS,
		CUSTOMER_NAME as customerName,
		CUSTOMER_TEL as customerTel,
		CUSTOMER_STATE as customerState,
		DATE, 
		CONTEXT, 
		SCHEDULE_TYPE as scheduleType, 
		PROGRESS, 
		B_TYPE as bType, 
		CONTRACT_TYPE as contractType
		from schedule
		where SEQ_S = ${seqS}
	</select>
	<!-- 일정 추가 sql문 -->
	<insert id="scheduleInsert" parameterType="modelTO.scheduleTO">
		insert into schedule (
		PSEQ_S,
		CUSTOMER_NAME,
		CUSTOMER_TEL,
		CUSTOMER_STATE,
		DATE,
		CONTEXT, 
		SCHEDULE_TYPE,
		PROGRESS, 
		B_TYPE,
		CONTRACT_TYPE
		) 
		values (
		${pseqS}, 
		#{customerName}, 
		#{customerTel}, 
		#{customerState}, 
		#{date},
		#{context}, 
		#{scheduleType}, 
		#{progress},
		#{bType}, 
		#{contractType}
		)
	</insert>
	<!--일정 변경 sql문 -->
	<update id="scheduleUpdate" parameterType="modelTO.scheduleTO">
		UPDATE schedule SET
		CUSTOMER_TEL = #{customerTel},
		CUSTOMER_STATE = #{customerState},
		DATE = #{date},
		CONTEXT = #{context},
		SCHEDULE_TYPE = #{scheduleType},
		PROGRESS = #{progress},
		B_TYPE = #{bType},
		CONTRACT_TYPE = #{contractType}
		WHERE SEQ_S = ${seqS}
	</update>
	<!-- 일정 삭제 sql문 -->
	<delete id="scheduleDelete" parameterType="modelTO.scheduleTO">
		delete from schedule where SEQ_S=${seqS}
	</delete>
	<!-- 회원탈퇴 sql문 -->
	<delete id="userDelete" parameterType="modelTO.userTO">
		delete from user where where SEQ_U=${seqU}, password=#{password}
	</delete>
	<!-- 관리자 회원탈퇴 sql문 -->
	<delete id="userAdminDelete" parameterType="modelTO.userTO">
		delete from user where where SEQ_U=${seqU}
	</delete>
	<!-- 관리자 유저관리 view sql문 -->
	<select id="userAdminSelect" resultType="modelTO.userTO">
		select SEQ_U as seqU,
		NAME as name,
		ID as id,
		EMAIL as email,
		ADDRESS as address,
		TEL1 as tel1, 
		TEL2 as tel2
		from user
	</select>
</mapper>